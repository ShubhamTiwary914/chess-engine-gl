#include "consts.h"


void BREAKPOINT(bool condition, const std::string &message) {
    if (!condition) {
        std::cerr << "Breakpoint: " << message << std::endl;
        assert(condition);
    }
}

std::unordered_map<char, int> piecesCharMap = {
    {'k', KING},   {'K', KING},
    {'p', PAWN},   {'P', PAWN},
    {'n', KNIGHT}, {'N', KNIGHT},
    {'b', BISHOP}, {'B', BISHOP},
    {'r', ROOK},   {'R', ROOK},
    {'q', QUEEN},  {'Q', QUEEN},
    {'E', NONE}   
};



const uint64_t FILE_H_BITS = 0x8080808080808080;
const uint64_t RANK_1_BITS = 0x00000000000000FF;
const uint64_t DIAGONAL_LEFT_BASE = 0x0102040810204080;  //   diagonal in form: /
const uint64_t DIAGONAL_RIGHT_BASE = 0x8040201008040201;   //  diagonal in form: \


/// @brief masking the 1, 1&2, 1&2&3, ... ranks
const U64 FILE_MASKS[8] = {
    72340172838076673ULL,
    144680345676153346ULL,
    289360691352306692ULL,
    578721382704613384ULL,
    1157442765409226768ULL,
    2314885530818453536ULL,
    4629771061636907072ULL,
    9259542123273814144ULL
};

/// @brief masing the a, a&b, a&b&c, ... files
const U64 RANK_MASKS[8] = {
    255ULL,
    65280ULL,
    16711680ULL,
    4278190080ULL,
    1095216660480ULL,
    280375465082880ULL,
    71776119061217280ULL,
    18374686479671623680ULL
};





const int KNIGHT_OFFSETS[8] = {-17, -15, -10, -6, 6, 10, 15, 17};
const int KING_OFFSETS[8] = {-9, -8, -7, -1, 1, 7, 8, 9};
const int PAWN_CAPTURE_OFFSETS[2] = {7, 9};






const uint64_t ROOK_MAGICS[64] = {
    0x0080001020400080ULL, 0x0040001000200040ULL, 0x0080081000200080ULL, 0x0080040800100080ULL,
    0x0080020400080080ULL, 0x0080010200040080ULL, 0x0080008001000200ULL, 0x0080002040800100ULL,
    0x0000800020400080ULL, 0x0000400020005000ULL, 0x0000801000200080ULL, 0x0000800800100080ULL,
    0x0000800400080080ULL, 0x0000800200040080ULL, 0x0000800100020080ULL, 0x0000800040800100ULL,
    0x0000208000400080ULL, 0x0000404000201000ULL, 0x0000808010002000ULL, 0x0000808008001000ULL,
    0x0000808004000800ULL, 0x0000808002000400ULL, 0x0000010100020004ULL, 0x0000020000408104ULL,
    0x0000208080004000ULL, 0x0000200040005000ULL, 0x0000100080200080ULL, 0x0000080080100080ULL,
    0x0000040080080080ULL, 0x0000020080040080ULL, 0x0000010080800200ULL, 0x0000800080004100ULL,
    0x0000204000800080ULL, 0x0000200040401000ULL, 0x0000100080802000ULL, 0x0000080080801000ULL,
    0x0000040080800800ULL, 0x0000020080800400ULL, 0x0000020001010004ULL, 0x0000800040800100ULL,
    0x0000204000808000ULL, 0x0000200040008080ULL, 0x0000100020008080ULL, 0x0000080010008080ULL,
    0x0000040008008080ULL, 0x0000020004008080ULL, 0x0000010002008080ULL, 0x0000004081020004ULL,
    0x0000204000800080ULL, 0x0000200040008080ULL, 0x0000100020008080ULL, 0x0000080010008080ULL,
    0x0000040008008080ULL, 0x0000020004008080ULL, 0x0000800100020080ULL, 0x0000800041000080ULL,
    0x00FFFCDDFCED714AULL, 0x007FFCDDFCED714AULL, 0x003FFFCDFFD88096ULL, 0x0000040810002101ULL,
    0x0001000204080011ULL, 0x0001000204000801ULL, 0x0001000082000401ULL, 0x0001FFFAABFAD1A2ULL
};

const uint64_t BISHOP_MAGICS[64] = {
    0x40040844404084ULL, 0x2004208a004208ULL, 0x10190041080202ULL, 0x108060845042010ULL,
    0x581104180800210ULL, 0x2112080446200010ULL, 0x1080820820060210ULL, 0x3c0808410220200ULL,
    0x4050404440404ULL, 0x21001420088ULL, 0x24d0080801082102ULL, 0x1020a0a020400ULL,
    0x40308200402ULL, 0x4011002100800ULL, 0x401484104104005ULL, 0x801010402020200ULL,
    0x400210c3880100ULL, 0x404022024108200ULL, 0x810018200204102ULL, 0x4002801a02003ULL,
    0x85040820080400ULL, 0x810102c808880400ULL, 0xe900410884800ULL, 0x8002020480840102ULL,
    0x220200865090201ULL, 0x2010100a02021202ULL, 0x152048408022401ULL, 0x20080002081110ULL,
    0x4001001021004000ULL, 0x800040400a011002ULL, 0xe4004081011002ULL, 0x1c004001012080ULL,
    0x8004200962a00220ULL, 0x8422100208500202ULL, 0x2000402200300c08ULL, 0x8646020080080080ULL,
    0x80020a0200100808ULL, 0x2010004880111000ULL, 0x623000a080011400ULL, 0x42008c0340209202ULL,
    0x209188240001000ULL, 0x400408a884001800ULL, 0x110400a6080400ULL, 0x1840060a44020800ULL,
    0x90080104000041ULL, 0x201011000808101ULL, 0x1a2208080504f080ULL, 0x8012020600211212ULL,
    0x500861011240000ULL, 0x180806108200800ULL, 0x4000020e01040044ULL, 0x300000261044000aULL,
    0x802241102020002ULL, 0x20906061210001ULL, 0x5a84841004010310ULL, 0x4010801011c04ULL,
    0xa010109502200ULL, 0x4a02012000ULL, 0x500201010098b028ULL, 0x8040002811040900ULL,
    0x28000010020204ULL, 0x6000020202d0240ULL, 0x8918844842082200ULL, 0x4010011029020020ULL
};